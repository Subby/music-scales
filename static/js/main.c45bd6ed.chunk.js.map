{"version":3,"sources":["data.js","services/findNotesToDisplay.js","components/Select.js","App.js","reportWebVitals.js","index.js"],"names":["notes","scales","name","intervals","findNotesToDisplay","rootNote","scale","noteSum","indexOf","scaleIntervals","calculatedNotes","forEach","interval","push","length","Select","label","fieldName","defaultValue","options","onChangeHandler","htmlFor","id","value","onChange","e","target","App","noteOptions","map","note","scaleOptions","currentScale","useState","setRootNote","setScale","className","defaulValue","newRootNote","newScale","find","s","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAGMA,G,MAAQ,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,MACrEC,EAAS,CACX,CACIC,KAAM,QACNC,UAAW,CANL,IADD,EACC,MADD,IAST,CAAID,KAAM,QACNC,UAAW,CATL,EADD,EACC,IADD,EACC,OCYCC,EAXY,SAACC,EAAUC,GAClC,IAAIC,EAAUP,EAAMQ,QAAQH,GACtBI,EAAiBH,EAAMH,UACvBO,EAAkB,CAACL,GAKzB,OAJAI,EAAeE,SAAQ,SAAAC,GACnBL,GAAoBK,EACpBF,EAAgBG,KAAKb,EAAMO,EAAUP,EAAMc,YAExCJ,G,OCKIK,EAbA,SAAC,GAAgE,IAA/DC,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,UAAWC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBACtD,OACI,gCACI,uBAAOC,QAASJ,EAAhB,SAA4BD,IAE5B,wBAAQd,KAAMe,EAAWK,GAAIL,EAAWM,MAAOL,EAAcM,SAAU,SAACC,GAAD,OAAOL,EAAgBK,EAAEC,OAAOH,QAAvG,SACKJ,QCgCFQ,MAlCf,WACE,IAAMC,EAAc5B,EAAM6B,KAAI,SAAAC,GAAI,OAAI,wBAAmBP,MAAOO,EAA1B,SAAiCA,GAApBA,MAC7CC,EAAe9B,EAAO4B,KAAI,SAAAG,GAAY,OAAI,wBAAgCT,MAAOS,EAAa9B,KAApD,SAA4D8B,EAAa9B,MAA5D8B,EAAa9B,SAF7D,EAImB+B,mBAASjC,EAAM,IAJlC,mBAINK,EAJM,KAII6B,EAJJ,OAKaD,mBAAShC,EAAO,IAL7B,mBAKNK,EALM,KAKC6B,EALD,KAWb,OACE,qBAAKC,UAAU,MAAf,SACE,iCACE,cAAC,EAAD,CACIpB,MAAM,YACNC,UAAY,WACZoB,YAAehC,EACfc,QAASS,EACTR,gBAVmB,SAACkB,GAAD,OAAiBJ,EAAYI,MAYpD,cAAC,EAAD,CACItB,MAAM,QACNC,UAAY,QACZoB,YAAehC,EAASH,KACxBiB,QAASY,EACTX,gBAnBgB,SAACmB,GAAD,OAAcJ,EAASlC,EAAOuC,MAAK,SAAAC,GAAC,OAAIA,EAAEvC,OAASqC,SAqBvE,4BAAInC,EAAmBC,EAAUC,GAAOuB,KAAI,SAAAC,GAAI,OAAI,4BAAIA,eCtBjDY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c45bd6ed.chunk.js","sourcesContent":["const HALF = 1;\nconst WHOLE = 2;\n\nconst notes = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\nconst scales = [\n    {\n        name: \"major\",\n        intervals: [WHOLE, WHOLE, HALF, WHOLE, WHOLE, WHOLE, HALF]\n    },\n    {   name: \"minor\",\n        intervals: [WHOLE, HALF, WHOLE, WHOLE, HALF, WHOLE, WHOLE]\n    }\n];\n\nexport {notes, scales}","import {notes} from \"../data\";\n\nconst findNotesToDisplay = (rootNote, scale) => {\n    let noteSum = notes.indexOf(rootNote);\n    const scaleIntervals = scale.intervals;\n    const calculatedNotes = [rootNote];\n    scaleIntervals.forEach(interval => {\n        noteSum = noteSum + interval;\n        calculatedNotes.push(notes[noteSum % notes.length])\n    });\n    return calculatedNotes;\n};\n\nexport default findNotesToDisplay;","import React from \"react\";\n\nconst Select = ({label, fieldName, defaultValue, options, onChangeHandler}) => {\n    return (\n        <div>\n            <label htmlFor={fieldName}>{label}</label>\n\n            <select name={fieldName} id={fieldName} value={defaultValue} onChange={(e) => onChangeHandler(e.target.value)}>\n                {options}\n            </select>\n        </div>\n        )\n\n};\n\nexport default Select;","import './App.css';\nimport React, {useState} from \"react\";\nimport {notes, scales} from \"./data\";\nimport findNotesToDisplay from \"./services/findNotesToDisplay\";\nimport Select from \"./components/Select\";\n\nfunction App() {\n  const noteOptions = notes.map(note => <option key={note} value={note}>{note}</option>);\n  const scaleOptions = scales.map(currentScale => <option key={currentScale.name} value={currentScale.name} >{currentScale.name}</option>);\n\n  const [rootNote, setRootNote] = useState(notes[0]);\n  const [scale, setScale] = useState(scales[0]);\n\n  const handleScaleChange = (newScale) => setScale(scales.find(s => s.name === newScale));\n\n  const handleRootNoteChange = (newRootNote) => setRootNote(newRootNote);\n\n  return (\n    <div className=\"App\">\n      <main>\n        <Select\n            label=\"Root Note\"\n            fieldName = \"rootNote\"\n            defaulValue = {rootNote}\n            options={noteOptions}\n            onChangeHandler={handleRootNoteChange}\n        />\n        <Select\n            label=\"Scale\"\n            fieldName = \"scale\"\n            defaulValue = {rootNote.name}\n            options={scaleOptions}\n            onChangeHandler={handleScaleChange}\n        />\n        <p>{findNotesToDisplay(rootNote, scale).map(note => <p>{note}</p>)}</p>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}